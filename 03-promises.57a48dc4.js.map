{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAGtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA6DPR,EAAKgB,iBAAiB,UAxDtB,SAAsBC,GACpBA,EAAMC,iBAGN,IAAMC,EAAYC,SAASjB,EAAWkB,OAChCC,EAAWF,SAAShB,EAAUiB,OAC9BE,EAAaH,SAASf,EAAOgB,OAG7BG,EAAW,GAGMlB,EAAc,EAAGa,GAGrCM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBV,EAAA6B,OAAOC,QAAQ,6BAA4CC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,OACjEsB,QAAQC,IAAI,+BAAgDF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,OAChER,EAAGgC,O,IAENC,OAAM,SAAAP,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBV,EAAA6B,OAAOO,QAAQ,4BAA2CL,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,OAChEsB,QAAQC,IAAI,8BAA+CF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,OAC/DR,EAAGgC,O,IAIT,IAAK,IAAIG,EAAI,EAAGA,GAAKZ,EAAYY,GAAK,EAAG,CACvC,IAEMC,EAAU9B,EAFC6B,EACHhB,EAAYG,GAAYa,EAAI,IAG1CC,EACGX,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBV,EAAA6B,OAAOC,QAAQ,qBAAoCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,OACzDsB,QAAQC,IAAI,uBAAwCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAE3DyB,OAAM,SAAAP,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBV,EAAA6B,OAAOO,QAAQ,oBAAmCL,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,OACxDsB,QAAQC,IAAI,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAG3DgB,EAASa,KAAKD,E,CAIhB3B,QAAQ6B,IAAId,GACTC,MAAK,SAAAC,GAAWA,EAARnB,SAAemB,EAALlB,MACjBsB,QAAQC,IAAI,6B,IAEbE,OAAM,WACLH,QAAQC,IAAI,wB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst stepDelay = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\n// Function to create a promise with a random fulfillment or rejection\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Function to handle form submission\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  // Get form input values\n  const userDelay = parseInt(firstDelay.value);\n  const userStep = parseInt(stepDelay.value);\n  const userAmount = parseInt(amount.value);\n\n  // Create an empty array to hold the promises\n  const promises = [];\n\n  // Create a promise for the initial trade with userDelay\n  const initialPromise = createPromise(1, userDelay);\n\n  initialPromise\n    .then(({ position, delay }) => {\n      Notify.success(`Fulfilled initial promise ${position} in ${delay}ms`);\n      console.log(`✅ Fulfilled initial promise ${position} in ${delay}ms`);\n      form.reset();\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`Rejected initial promise ${position} in ${delay}ms`);\n      console.log(`❌ Rejected initial promise ${position} in ${delay}ms`);\n      form.reset();\n    });\n\n  // Create promises based on the form inputs\n  for (let i = 2; i <= userAmount; i += 1) {\n    const position = i;\n    const delay = userDelay + userStep * (i - 1); // Adjust delay for subsequent trades\n    const promise = createPromise(position, delay);\n\n    promise\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    promises.push(promise);\n  }\n\n  // Handle all promises when they settle using Promise.all\n  Promise.all(promises)\n    .then(({ position, delay }) => {\n      console.log(\"All promises have settled!\");\n    })\n    .catch(() => {\n      console.log(\"Error in Promise.all:\");\n    });\n}\n\n// Add a submit event listener to the form\nform.addEventListener(\"submit\", handleSubmit);"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$stepDelay","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","userDelay","parseInt","value","userStep","userAmount","promises","then","param","Notify","success","concat","console","log","reset","catch","failure","i","promise","push","all"],"version":3,"file":"03-promises.57a48dc4.js.map"}