{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAGtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA6DbR,EAAKgB,iBAAiB,UAxDtB,SAAsBC,GACpBA,EAAMC,iBAGN,MAAMC,EAAYC,SAASjB,EAAWkB,OAChCC,EAAWF,SAAShB,EAAUiB,OAC9BE,EAAaH,SAASf,EAAOgB,OAG7BG,EAAW,GAGMlB,EAAc,EAAGa,GAGrCM,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBV,EAAA4B,OAAOC,QAAQ,6BAA6BpB,QAAeC,OAC3DoB,QAAQC,IAAI,+BAA6BtB,QAAiBC,OACxDR,EAAG8B,OAAO,IAEbC,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBV,EAAA4B,OAAOM,QAAQ,4BAA4BzB,QAAeC,OAC1DoB,QAAQC,IAAI,8BAA4BtB,QAAiBC,OACvDR,EAAG8B,OAAO,IAIhB,IAAK,IAAIG,EAAI,EAAGA,GAAKV,EAAYU,GAAK,EAAG,CACvC,MAEMC,EAAU5B,EAFC2B,EACHd,EAAYG,GAAYW,EAAI,IAG1CC,EACGT,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBV,EAAA4B,OAAOC,QAAQ,qBAAqBpB,QAAeC,OACnDoB,QAAQC,IAAI,uBAAqBtB,QAAiBC,MAAU,IAE7DuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBV,EAAA4B,OAAOM,QAAQ,oBAAoBzB,QAAeC,OAClDoB,QAAQC,IAAI,sBAAoBtB,QAAeC,MAAU,IAG7DgB,EAASW,KAAKD,E,CAIhBzB,QAAQ2B,IAAIZ,GACTC,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBoB,QAAQC,IAAI,6BAA6B,IAE1CE,OAAM,KACLH,QAAQC,IAAI,wBAAwB,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst stepDelay = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\n// Function to create a promise with a random fulfillment or rejection\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Function to handle form submission\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  // Get form input values\n  const userDelay = parseInt(firstDelay.value);\n  const userStep = parseInt(stepDelay.value);\n  const userAmount = parseInt(amount.value);\n\n  // Create an empty array to hold the promises\n  const promises = [];\n\n  // Create a promise for the initial trade with userDelay\n  const initialPromise = createPromise(1, userDelay);\n\n  initialPromise\n    .then(({ position, delay }) => {\n      Notify.success(`Fulfilled initial promise ${position} in ${delay}ms`);\n      console.log(`✅ Fulfilled initial promise ${position} in ${delay}ms`);\n      form.reset();\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`Rejected initial promise ${position} in ${delay}ms`);\n      console.log(`❌ Rejected initial promise ${position} in ${delay}ms`);\n      form.reset();\n    });\n\n  // Create promises based on the form inputs\n  for (let i = 2; i <= userAmount; i += 1) {\n    const position = i;\n    const delay = userDelay + userStep * (i - 1); // Adjust delay for subsequent trades\n    const promise = createPromise(position, delay);\n\n    promise\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    promises.push(promise);\n  }\n\n  // Handle all promises when they settle using Promise.all\n  Promise.all(promises)\n    .then(({ position, delay }) => {\n      console.log(\"All promises have settled!\");\n    })\n    .catch(() => {\n      console.log(\"Error in Promise.all:\");\n    });\n}\n\n// Add a submit event listener to the form\nform.addEventListener(\"submit\", handleSubmit);"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$stepDelay","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","userDelay","parseInt","value","userStep","userAmount","promises","then","Notify","success","console","log","reset","catch","failure","i","promise","push","all"],"version":3,"file":"03-promises.8bb2e331.js.map"}