{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAGtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA4CbR,EAAKgB,iBAAiB,UAxCtB,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMC,EAAYC,SAASjB,EAAWkB,OAChCC,EAAWF,SAAShB,EAAUiB,OAC9BE,EAAaH,SAASf,EAAOgB,OAC7BG,EAAW,GACMlB,EAAc,EAAGa,GAGrCM,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,QAAQC,IAAI,+BAA6BpB,QAAiBC,OACxDR,EAAG4B,OAAO,IAEbC,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBkB,QAAQC,IAAI,8BAA4BpB,QAAiBC,OACvDR,EAAG4B,OAAO,IAEhB,IAAK,IAAIE,EAAI,EAAGA,GAAKP,EAAYO,GAAK,EAAG,CACvC,MAEMC,EAAUzB,EAFCwB,EACHX,EAAYG,GAAYQ,EAAI,IAG1CC,EACGN,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,QAAQC,IAAI,uBAAqBpB,QAAiBC,MAAU,IAE7DqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBkB,QAAQC,IAAI,sBAAoBpB,QAAeC,MAAU,IAE7DgB,EAASQ,KAAKD,E,CAEhBtB,QAAQwB,IAAIT,GACTC,MAAK,KACJC,QAAQC,IAAI,6BAA6B,IAE1CE,OAAOK,IACNR,QAAQQ,MAAM,wBAAyBA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst stepDelay = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const userDelay = parseInt(firstDelay.value);\n  const userStep = parseInt(stepDelay.value);\n  const userAmount = parseInt(amount.value);\n  const promises = [];\n  const initialPromise = createPromise(1, userDelay);\n\n  initialPromise\n    .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled initial promise ${position} in ${delay}ms`);\n      form.reset();\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected initial promise ${position} in ${delay}ms`);\n      form.reset();\n    });\n  for (let i = 2; i <= userAmount; i += 1) {\n    const position = i;\n    const delay = userDelay + userStep * (i - 1);\n    const promise = createPromise(position, delay);\n\n    promise\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    promises.push(promise);\n  }\n  Promise.all(promises)\n    .then(() => {\n      console.log(\"All promises have settled!\");\n    })\n    .catch((error) => {\n      console.error(\"Error in Promise.all:\", error);\n    });\n}\nform.addEventListener(\"submit\", handleSubmit);"],"names":["$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$stepDelay","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","userDelay","parseInt","value","userStep","userAmount","promises","then","console","log","reset","catch","i","promise","push","all","error"],"version":3,"file":"03-promises.06d61213.js.map"}